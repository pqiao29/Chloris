% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Chloris.R
\name{Chloris}
\alias{Chloris}
\title{Main function}
\usage{
Chloris(
  RDR = NULL,
  A = NULL,
  D = NULL,
  break_idx = NULL,
  init = "hclust",
  K = 10,
  min_cluster_size = 1,
  cluster_shrink_tol = 20,
  S = 4,
  burnin_tol = 300,
  Gibbs_tol = 300
)
}
\arguments{
\item{RDR}{A matrix of Relative Depth Ratio (RDR), where each row and column represents a gene and a cell respectively.}

\item{A}{A matrix of count from the alternative allele in a heterozygous SNP, same dimension as \code{RDR}.}

\item{D}{A matrix of total count from both alleles in a SNP, same dimension as \code{RDR}.}

\item{break_idx}{The index of the first gene in each chromosome, so that genes from different chromosomes are treated as independent.
If \code{break_idx = NULL}, it is assumed that there is spatial dependency between all genes with adjacent indices.}

\item{init}{TODO: documentation}

\item{K}{An integer that is likely to be larger than the true number of clusters.
The resulting optimal number of clusters is <= K.}

\item{min_cluster_size}{Cluster size constraint. All resulting clusters need to contain at least \code{min_cluster_size} cells.}

\item{cluster_shrink_tol}{If a cluster contains less than \code{min_cluster_size} cells for \code{cluster_shrink_tol} consecutive MCMC iterations,
this cluster will be removed and \code{K} will be decreased accordingly.
If \code{cluster_shrink_tol == NULL}, then no cluster size constraint is imposed so the function always return \code{K} cluster.}

\item{S}{TODO: documentation}

\item{burnin_tol}{The number of Gibbs iterations for burn-in.}

\item{Gibbs_tol}{The number of Gibbs iterations after burn-in.}
}
\description{
1. Cluster cells into clones,
2. Infer copy number state profile for each clone,
3. Identify the optimal number of clones.
}
\examples{
\dontrun{
sims <- get_sim_data(K = 5, N = 100, U = 200)
res <- Chloris(sims$RDR)
plot_inout(sims$RDR, list(res$cluster_est, sims$cluster_true), res$state_est) ## model result
plot_inout(sims$RDR, list(sims$cluster_true, res$cluster_est), sims$states_true) ## simulation truth
}
}
